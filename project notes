- using pyautogui created a huge delay in the frames for some reason.
- the differencei n speed had to be considered.
- transitions to each frame without learning using pyautogui for inputs was around 3fps, and 1fps while learning
- without pyautogui, frames without learning were 60fps, and while learning around 20


- also tried calling the methods to move the character manually, but this cause the player to experience an outburst of acceleration enough to clip out of bounds after consecutive inputs in the same direction
- successfully added events to the pygame.event.queue() manually

- using Pillow to convert the screenshot to grayscale caused unwanted noise, so switched it skimage instead

  Working directly with raw Atari frames, which are 210 × 160 pixel images with a 128 color palette,
  can be computationally demanding, so we apply a basic preprocessing step aimed at reducing the
  input dimensionality. The raw frames are preprocessed by first converting their RGB representation
  to gray-scale and down-sampling it to a 110×84 image. The final input representation is obtained by
  cropping an 84 × 84 region of the image that roughly captures the playing area. The final cropping
  stage is only required because we use the GPU implementation of 2D convolutions from [11], which
  expects square inputs.

Deque: A data structure that is sort of like a queue or a stack. It is similar to a stack but allows for appending to tail and popping from head.
It is better than a stack and a queue in the sense that index accesses are O(1) from both ends of the datastructure. Index accesses close to the middle become O(n).
Because what we're doing involves popping the item we appended to this data structure a long time ago, and we want to append to the tail, it's a good data structure to use.
Faster at adding/removing elements from end or beginning, as it's a doubly linked list.


- for some reason we stop spawning after a while... when i check theres a lot of stuff on the screen tho
  therefore going to try new method of removing bullets, will also print out delaying_respawn

- the more complex the network the longer the frames take


- reset the monster spawn on each death and restart of the game
